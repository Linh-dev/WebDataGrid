<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BtnClick" xml:space="preserve">
    <value>Click</value>
  </data>
  <data name="BtnHover" xml:space="preserve">
    <value>Hover</value>
  </data>
  <data name="Client_Side_Events_Description_1" xml:space="preserve">
    <value>Navigation using client side methods.</value>
  </data>
  <data name="Client_Side_Events_Description_2" xml:space="preserve">
    <value>This example demonstrates how the WebImageViewer's CSOM can be used to navigate through images in response to client side events.</value>
  </data>
  <data name="Client_Side_Events_Description_3" xml:space="preserve">
    <value>Celestial Bodies</value>
  </data>
  <data name="Client_Side_Events_Radio_1" xml:space="preserve">
    <value>First</value>
  </data>
  <data name="Client_Side_Events_Radio_2" xml:space="preserve">
    <value>Second</value>
  </data>
  <data name="Client_Side_Events_Radio_3" xml:space="preserve">
    <value>Third</value>
  </data>
  <data name="Client_Side_Events_Radio_4" xml:space="preserve">
    <value>Fourth</value>
  </data>
  <data name="Client_Side_Events_Radio_5" xml:space="preserve">
    <value>Fifth</value>
  </data>
  <data name="Client_Side_Events_Radio_6" xml:space="preserve">
    <value>Sixth</value>
  </data>
  <data name="Client_Side_Events_Radio_7" xml:space="preserve">
    <value>Seventh</value>
  </data>
  <data name="CSOM_Tooltip_1" xml:space="preserve">
    <value>Wizard</value>
  </data>
  <data name="CSOM_Tooltip_2" xml:space="preserve">
    <value>Heroes</value>
  </data>
  <data name="CSOM_Tooltip_3" xml:space="preserve">
    <value>Caped Crusader</value>
  </data>
  <data name="CSOM_Tooltip_4" xml:space="preserve">
    <value>Turtle</value>
  </data>
  <data name="CSOM_Tooltip_5" xml:space="preserve">
    <value>Battle</value>
  </data>
  <data name="CSOM_Tooltip_6" xml:space="preserve">
    <value>Ferocious Tiger</value>
  </data>
  <data name="CSOM_Tooltip_7" xml:space="preserve">
    <value>MechWarrior</value>
  </data>
  <data name="Customizing_Header_Description_1" xml:space="preserve">
    <value>How to create a templated header with custom paging.</value>
  </data>
  <data name="Customizing_Header_Description_2" xml:space="preserve">
    <value>The following code shows the client side handler which invokes the moveItemIntoFocus method based on the selected radio button.</value>
  </data>
  <data name="Customizing_Header_Description_3" xml:space="preserve">
    <value>The WebImageViewer's Header object can be templated to offer customized rendering and functionality. This example combines a templated header with calls to the client side WebImageViewer api to achieve custom paging. It also takes advantage of the ASP.NET Ajax $addHandler method for registering event handlers.</value>
  </data>
  <data name="Customizing_Header_Footer" xml:space="preserve">
    <value>By: Infragistics</value>
  </data>
  <data name="DataBinding_Description_1" xml:space="preserve">
    <value>Databinding to a DataSource control</value>
  </data>
  <data name="DataBinding_Description_2" xml:space="preserve">
    <value>This example binds a WebImageViewer to an AccessDataSource. The following ItemImageBinding definition controls how the control maps information from the database.</value>
  </data>
  <data name="DataBinding_Description_3" xml:space="preserve">
    <value>Celestial Bodies</value>
  </data>
  <data name="Navigation_Mode_Description_1" xml:space="preserve">
    <value>How to adjust the navigation mode.</value>
  </data>
  <data name="Navigation_Mode_Description_2" xml:space="preserve">
    <value>The WebImageViewer supports a variety of ways in which the user can scroll the visible images. This sample demonstrates several navigation styles by changing the active mode from the client API.</value>
  </data>
  <data name="Navigation_Mode_Description_3" xml:space="preserve">
    <value>Scroll Animation</value>
  </data>
  <data name="Navigation_Mode_Description_4" xml:space="preserve">
    <value>Scroll Alignment</value>
  </data>
  <data name="Selecting_Items_Advertisement_1" xml:space="preserve">
    <value>Infragistics Windows Forms provides every essential UI component needed to build and style commercial-class application for Windows Forms, including grids, scheduling, charting, gauges, toolbars, ribbon, menus, listbars, trees, tabs, explorer bars, desktop alerts, UI and editors.</value>
  </data>
  <data name="Selecting_Items_Advertisement_2" xml:space="preserve">
    <value>Infragistics JSF is a set of rich, easily styled AJAX-enabled JavaServer™ Faces components for building commercial class user interfaces for J2EE applications, including a hierarchical grid, 2D/3D charts, tree, menu, tab, calendar and input controls.</value>
  </data>
  <data name="Selecting_Items_Advertisement_3" xml:space="preserve">
    <value>Infragistics ASP.NET provides every essential UI component necessary for building search engine optimized, AJAX-enabled interfaces for ASP.NET applications, including grids, scheduling, charting, gauges, toolbars, menus, listbars, trees, tabs, resizer, UI and editors.</value>
  </data>
  <data name="Selecting_Items_Advertisement_4" xml:space="preserve">
    <value>Throughout the year, Infragistics will offer courses at regional locations throughout the United States and Europe. We can also deliver courses at your corporate facilities if desired.</value>
  </data>
  <data name="Selecting_Items_Advertisement_5" xml:space="preserve">
    <value>Infragistics® WPF provides the world’s first business-grade developer components for WPF, including datagrids, carousels and editors. Start building your WPF toolset now! Limited-time INTRODUCTORY PRICING!</value>
  </data>
  <data name="Selecting_Items_Advertisement_6" xml:space="preserve">
    <value>The Infragistics Product Family</value>
  </data>
  <data name="Selecting_Items_Advertisement_7" xml:space="preserve">
    <value>Select a product for more information.</value>
  </data>
  <data name="Selecting_Items_Description_1" xml:space="preserve">
    <value>How to react to user selection of an image.</value>
  </data>
  <data name="Selecting_Items_Description_2" xml:space="preserve">
    <value>This example demonstrates how to react to a user selecting an image in the WebImageViewer through client code. The following code block executes after an image is selected and takes advantage of custom event arguments.</value>
  </data>
  <data name="ControlName" xml:space="preserve">
    <value>WebImageViewer</value>
  </data>
  <data name="SelectColor" xml:space="preserve">
    <value>Select desired car color</value>
  </data>
</root>